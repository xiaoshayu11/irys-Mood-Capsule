/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OnChainDiaryInterface extends Interface {
  getFunction(
    nameOrSignature: "MAX_LENGTH" | "getDiary" | "getMyDiary" | "writeDiary"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DiaryWritten"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDiary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyDiary",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "writeDiary", values: [string]): string;

  decodeFunctionResult(functionFragment: "MAX_LENGTH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDiary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMyDiary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeDiary", data: BytesLike): Result;
}

export namespace DiaryWrittenEvent {
  export type InputTuple = [
    user: AddressLike,
    date: BigNumberish,
    content: string
  ];
  export type OutputTuple = [user: string, date: bigint, content: string];
  export interface OutputObject {
    user: string;
    date: bigint;
    content: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OnChainDiary extends BaseContract {
  connect(runner?: ContractRunner | null): OnChainDiary;
  waitForDeployment(): Promise<this>;

  interface: OnChainDiaryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_LENGTH: TypedContractMethod<[], [bigint], "view">;

  getDiary: TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish],
    [string],
    "view"
  >;

  getMyDiary: TypedContractMethod<[_date: BigNumberish], [string], "view">;

  writeDiary: TypedContractMethod<[_content: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDiary"
  ): TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyDiary"
  ): TypedContractMethod<[_date: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "writeDiary"
  ): TypedContractMethod<[_content: string], [void], "nonpayable">;

  getEvent(
    key: "DiaryWritten"
  ): TypedContractEvent<
    DiaryWrittenEvent.InputTuple,
    DiaryWrittenEvent.OutputTuple,
    DiaryWrittenEvent.OutputObject
  >;

  filters: {
    "DiaryWritten(address,uint256,string)": TypedContractEvent<
      DiaryWrittenEvent.InputTuple,
      DiaryWrittenEvent.OutputTuple,
      DiaryWrittenEvent.OutputObject
    >;
    DiaryWritten: TypedContractEvent<
      DiaryWrittenEvent.InputTuple,
      DiaryWrittenEvent.OutputTuple,
      DiaryWrittenEvent.OutputObject
    >;
  };
}
