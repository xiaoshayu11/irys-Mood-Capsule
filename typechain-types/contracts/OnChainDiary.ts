/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace OnChainDiary {
  export type DiaryDataStruct = {
    author: AddressLike;
    date: BigNumberish;
    content: string;
    imageHash: string;
    timestamp: BigNumberish;
  };

  export type DiaryDataStructOutput = [
    author: string,
    date: bigint,
    content: string,
    imageHash: string,
    timestamp: bigint
  ] & {
    author: string;
    date: bigint;
    content: string;
    imageHash: string;
    timestamp: bigint;
  };
}

export interface OnChainDiaryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_DAILY_SUBMISSIONS"
      | "MAX_LENGTH"
      | "addTester"
      | "approve"
      | "balanceOf"
      | "diaryNFTs"
      | "getApproved"
      | "getDailySubmissionCount"
      | "getDiary"
      | "getDiaryEntry"
      | "getDiaryImage"
      | "getDiaryNFT"
      | "getMyDiary"
      | "isApprovedForAll"
      | "isTester"
      | "mintDiaryAsNFT"
      | "name"
      | "owner"
      | "ownerOf"
      | "removeTester"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "testers"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "writeDiary"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "DiaryMintedAsNFT"
      | "DiaryWritten"
      | "OwnershipTransferred"
      | "TesterAdded"
      | "TesterRemoved"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_DAILY_SUBMISSIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "diaryNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDailySubmissionCount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiaryEntry",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiaryImage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiaryNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyDiary",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintDiaryAsNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "writeDiary",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_DAILY_SUBMISSIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_LENGTH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTester", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diaryNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailySubmissionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDiary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDiaryEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiaryImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiaryNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyDiary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTester", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintDiaryAsNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeDiary", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiaryMintedAsNFTEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    date: BigNumberish
  ];
  export type OutputTuple = [user: string, tokenId: bigint, date: bigint];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    date: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiaryWrittenEvent {
  export type InputTuple = [
    user: AddressLike,
    date: BigNumberish,
    content: string,
    imageHash: string,
    submissionIndex: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    date: bigint,
    content: string,
    imageHash: string,
    submissionIndex: bigint
  ];
  export interface OutputObject {
    user: string;
    date: bigint;
    content: string;
    imageHash: string;
    submissionIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TesterAddedEvent {
  export type InputTuple = [tester: AddressLike];
  export type OutputTuple = [tester: string];
  export interface OutputObject {
    tester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TesterRemovedEvent {
  export type InputTuple = [tester: AddressLike];
  export type OutputTuple = [tester: string];
  export interface OutputObject {
    tester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OnChainDiary extends BaseContract {
  connect(runner?: ContractRunner | null): OnChainDiary;
  waitForDeployment(): Promise<this>;

  interface: OnChainDiaryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_DAILY_SUBMISSIONS: TypedContractMethod<[], [bigint], "view">;

  MAX_LENGTH: TypedContractMethod<[], [bigint], "view">;

  addTester: TypedContractMethod<[_tester: AddressLike], [void], "nonpayable">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  diaryNFTs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string, bigint] & {
        author: string;
        date: bigint;
        content: string;
        imageHash: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getDailySubmissionCount: TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish],
    [bigint],
    "view"
  >;

  getDiary: TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish],
    [string[]],
    "view"
  >;

  getDiaryEntry: TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish, _index: BigNumberish],
    [string],
    "view"
  >;

  getDiaryImage: TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish],
    [string[]],
    "view"
  >;

  getDiaryNFT: TypedContractMethod<
    [_tokenId: BigNumberish],
    [OnChainDiary.DiaryDataStructOutput],
    "view"
  >;

  getMyDiary: TypedContractMethod<[_date: BigNumberish], [string[]], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isTester: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  mintDiaryAsNFT: TypedContractMethod<[], [void], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  removeTester: TypedContractMethod<
    [_tester: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  testers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  writeDiary: TypedContractMethod<
    [_content: string, _imageHash: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_DAILY_SUBMISSIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addTester"
  ): TypedContractMethod<[_tester: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "diaryNFTs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string, bigint] & {
        author: string;
        date: bigint;
        content: string;
        imageHash: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDailySubmissionCount"
  ): TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDiary"
  ): TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDiaryEntry"
  ): TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish, _index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDiaryImage"
  ): TypedContractMethod<
    [_user: AddressLike, _date: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDiaryNFT"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [OnChainDiary.DiaryDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyDiary"
  ): TypedContractMethod<[_date: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTester"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintDiaryAsNFT"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeTester"
  ): TypedContractMethod<[_tester: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "testers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "writeDiary"
  ): TypedContractMethod<
    [_content: string, _imageHash: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "DiaryMintedAsNFT"
  ): TypedContractEvent<
    DiaryMintedAsNFTEvent.InputTuple,
    DiaryMintedAsNFTEvent.OutputTuple,
    DiaryMintedAsNFTEvent.OutputObject
  >;
  getEvent(
    key: "DiaryWritten"
  ): TypedContractEvent<
    DiaryWrittenEvent.InputTuple,
    DiaryWrittenEvent.OutputTuple,
    DiaryWrittenEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TesterAdded"
  ): TypedContractEvent<
    TesterAddedEvent.InputTuple,
    TesterAddedEvent.OutputTuple,
    TesterAddedEvent.OutputObject
  >;
  getEvent(
    key: "TesterRemoved"
  ): TypedContractEvent<
    TesterRemovedEvent.InputTuple,
    TesterRemovedEvent.OutputTuple,
    TesterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "DiaryMintedAsNFT(address,uint256,uint256)": TypedContractEvent<
      DiaryMintedAsNFTEvent.InputTuple,
      DiaryMintedAsNFTEvent.OutputTuple,
      DiaryMintedAsNFTEvent.OutputObject
    >;
    DiaryMintedAsNFT: TypedContractEvent<
      DiaryMintedAsNFTEvent.InputTuple,
      DiaryMintedAsNFTEvent.OutputTuple,
      DiaryMintedAsNFTEvent.OutputObject
    >;

    "DiaryWritten(address,uint256,string,string,uint256)": TypedContractEvent<
      DiaryWrittenEvent.InputTuple,
      DiaryWrittenEvent.OutputTuple,
      DiaryWrittenEvent.OutputObject
    >;
    DiaryWritten: TypedContractEvent<
      DiaryWrittenEvent.InputTuple,
      DiaryWrittenEvent.OutputTuple,
      DiaryWrittenEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TesterAdded(address)": TypedContractEvent<
      TesterAddedEvent.InputTuple,
      TesterAddedEvent.OutputTuple,
      TesterAddedEvent.OutputObject
    >;
    TesterAdded: TypedContractEvent<
      TesterAddedEvent.InputTuple,
      TesterAddedEvent.OutputTuple,
      TesterAddedEvent.OutputObject
    >;

    "TesterRemoved(address)": TypedContractEvent<
      TesterRemovedEvent.InputTuple,
      TesterRemovedEvent.OutputTuple,
      TesterRemovedEvent.OutputObject
    >;
    TesterRemoved: TypedContractEvent<
      TesterRemovedEvent.InputTuple,
      TesterRemovedEvent.OutputTuple,
      TesterRemovedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
